plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.base' version '2.0.0'
    id 'com.moowork.node' version '1.3.1'
}


dependencies {
    //compile "com.enonic.xp:script-api:${xpVersion}"
    compile "com.enonic.xp:lib-event:${xpVersion}"
    compile "com.enonic.xp:lib-content:${xpVersion}"
    compile "com.enonic.xp:lib-portal:${xpVersion}"
    compile "com.enonic.lib:lib-thymeleaf:2.0.0"
    //compile "com.enonic.xp:lib-auth:${xpVersion}"
    //compile "com.enonic.xp:lib-context:${xpVersion}"
    //compile "com.enonic.xp:lib-i18n:${xpVersion}"
    //compile "com.enonic.xp:lib-io:${xpVersion}"
    //compile "com.enonic.xp:lib-mail:${xpVersion}"
    //compile "com.enonic.xp:lib-repo:${xpVersion}"
    //compile "com.enonic.xp:lib-websocket:${xpVersion}"
    //compile "com.enonic.lib:lib-mustache:2.0.0"
    //compile "com.enonic.lib:lib-util:2.0.0"

    compile "io.mola.galimatias:galimatias:0.2.0"

    testCompile "com.enonic.xp:testing:${xpVersion}"
    //testCompile 'org.mockito:mockito-core:2.+'
    //testCompile 'junit:junit:4.12'
}

repositories {
    xp.enonicRepo()
    mavenLocal()
    jcenter()
}

node {
    download = true
    version '10.16.0'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.client.config.js', '--color', '--hide-modules' ]
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    // args = [ '--config', 'webpack.server.config.babel.js', '--color', '--hide-modules' ]
    args = [ '--config', 'webpack.server.config.js', '--color', '--hide-modules' ]
    description = 'Build server JS.'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    //dependsOn += clientWebpack
    dependsOn += serverWebpack
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
